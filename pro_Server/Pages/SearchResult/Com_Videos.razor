
<div style="margin-left:193px; margin-top:50px;">
    @if (Voc.VocSubtitles == null)
    {
        <span>Loading...</span>
    }
    else if (Voc.VocSubtitles.Count == 0)
    {
        <span>There's no videos for this vocabulary.</span>
    }
    else if (Voc.VocSubtitles.Count > 0)
    {
        @*<p id="demo">@TimerTicks</p>*@
        <div class="row">
            <p>@(currentVocSubtitleIndex+1) of @Voc.VocSubtitles.Count video available</p>
        </div>
        <div class="row">
            @*<button @onclick=@(()=>onYouTubeIframeAPIReady())>onYouTubeIframeAPIReady</button>*@
            @*<button @onclick="stopVideo">stopVideo</button>*@

            <button @onclick=@(()=> seekTo(Voc.VocSubtitles[currentVocSubtitleIndex].Subtitle.StartTime)) class="btn"><i class="fas fa-undo"></i></button>
            <button @onclick="PrevVideo" class="btn"><i class="fas fa-chevron-circle-left"></i></button>
            <button @onclick="NextVideo" class="btn"><i class="fas fa-chevron-circle-right"></i></button>
        </div>
        <div class="row">

            <iframe id="existing-iframe-example"
                    width="640" height="360"
                    src=@($"https://www.youtube.com/embed/" +
                          $"{Voc.VocSubtitles[currentVocSubtitleIndex].Subtitle.Movie.MovieId}" +
                          $"?enablejsapi=1" +
                          $"&start={(int)Voc.VocSubtitles[currentVocSubtitleIndex].Subtitle.StartTime}" +
                          $"&rel=0" +
                          $"&autoplay=1")
                    frameborder="0"
                    style="border: solid 4px #37474F">
            </iframe>
        </div>
        <div class="row">
            <h4>@((MarkupString)currentSubtitleText)</h4>
        </div>
    }
</div>


@code {

    [Parameter] public Voc Voc { get; set; }
    [Inject] public IJSRuntime JSRuntime { get; set; }

    public int currentVocSubtitleIndex { get; set; }
    public string currentSubtitleText { get; set; }

    decimal TimerTicks;

    protected override async Task OnInitializedAsync()
    {

    }
    protected override async Task OnParametersSetAsync()
    {

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await onYouTubeIframeAPIReady();
            await StartTimer();
        }
    }
    #region Pro
    public async Task StartTimer()
    {
        while (true)
        {
            if (Voc.VocSubtitles == null || Voc.VocSubtitles.Count == 0) continue;

            await Task.Delay(100);

            var currentTime = await getCurrentTime();

            TimerTicks = currentTime;


            var ss = Voc.VocSubtitles[currentVocSubtitleIndex].Subtitle.Movie.Subtitles.FirstOrDefault(x =>
            x.StartTime <= (int)TimerTicks &&
            x.EndtTime > (int)TimerTicks);

            currentSubtitleText = (ss != null) ? ss.Text : string.Empty;
            currentSubtitleText = currentSubtitleText.Replace(Voc.Text, $"<mark>{Voc.Text}</mark>");
            
            StateHasChanged();
        }
    }
    #endregion
    public async Task RefreshMe(Voc voc)
    {
        Voc = voc;
        StateHasChanged();
    }

    async Task onYouTubeIframeAPIReady()
    {
        await JSRuntime.InvokeVoidAsync("onYouTubeIframeAPIReady");
    }
    async Task onYouTubeIframeAPIReady2()
    {
        await JSRuntime.InvokeVoidAsync("onYouTubeIframeAPIReady2");
    }
    async Task setId(string id, string startTime)
    {
        await JSRuntime.InvokeVoidAsync("setId", id, TimeSpan.Parse(startTime).TotalSeconds);
    }
    async Task onPlayerReady()
    {
        await JSRuntime.InvokeVoidAsync("onPlayerReady");
    }
    async Task onPlayerStateChange()
    {
        await JSRuntime.InvokeVoidAsync("onPlayerStateChange");
    }
    async Task stopVideo()
    {
        await JSRuntime.InvokeVoidAsync("stopVideo");
    }
    async Task playVideo()
    {
        await JSRuntime.InvokeVoidAsync("playVideo");
    }
    async Task seekTo(decimal start)
    {
        await JSRuntime.InvokeVoidAsync("seek", (int)start);
    }
    async Task<decimal> getCurrentTime()
    {
        return await JSRuntime.InvokeAsync<decimal>("getCurrentTime");
    }
    async Task NextVideo()
    {
        if (Voc.VocSubtitles == null || Voc.VocSubtitles.Count == 0) return;
        if (currentVocSubtitleIndex < Voc.VocSubtitles.Count - 1)
        {
            currentVocSubtitleIndex++;
            //await JSRuntime.InvokeVoidAsync("playVideo");
        }
    }
    async Task PrevVideo()
    {
        if (Voc.VocSubtitles == null || Voc.VocSubtitles.Count == 0) return;
        if (currentVocSubtitleIndex > 0)
        {
            currentVocSubtitleIndex--;
            //await JSRuntime.InvokeVoidAsync("playVideo");
        }
    }
}
