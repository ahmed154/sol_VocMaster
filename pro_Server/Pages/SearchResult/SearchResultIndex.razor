@page "/search/{txt}"

<div class="container-fluid">
    @* for LG and bigger *@
    <div class="d-none d-lg-block">
        <div class="row">

            <div class="col-auto mt-3">
                <a href="" style="margin-top: 15px; text-decoration: none;">
                    <span style="font-size:30px;color:#1b292a">VocWiki</span>
                </a>
            </div>

            <div class="col-6" style="margin-top: 17px;">
                <EditForm Model="@VocVM" OnValidSubmit=@Search class="card card-sm">
                    <div class="row align-items-center" style="height: 45px;">
                        <div class="col">
                            <InputText @bind-Value="@VocVM.Voc.Text" class="form-control form-control-borderless" type="search" placeholder="Search In More Than 50,000 Vocabulary" />
                        </div>

                        <div class="col-auto form-control-borderless " style="margin-right:15px; border:none;">
                            <button class="btn" type="submit"><i class="fas fa-search h4 text-body" style="margin-top:4px"></i></button>
                        </div>

                    </div>
                </EditForm>
            </div>

            <div class="col" style="border: thin; text-align: right; margin-top: 10px;">
                <LoginDisplay />
            </div>

        </div>
    </div>

    @* for MD and smaller *@
    <div class="d-block d-lg-none">

        <div class="row">
            <div class="col">
                <a href="" style="margin-top: 15px; text-decoration: none; float:left;">
                    <span style="font-size:30px;color:#1b292a">VocWiki</span>
                </a>
                <div class="text-right" style="margin-top: 10px;">
                    <LoginDisplay />
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <EditForm Model="@VocVM" OnValidSubmit=@Search class="card card-sm">
                    <div class="row align-items-center" style="height: 45px;">
                        <div class="col">
                            <InputText @bind-Value="@VocVM.Voc.Text" class="form-control form-control-borderless" type="search" placeholder="Search In More Than 50,000 Vocabulary" />
                        </div>

                        <div class="col-auto form-control-borderless " style="margin-right:15px; border:none;">
                            <button class="btn" type="submit"><i class="fas fa-search h4 text-body" style="margin-top:4px"></i></button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>

    </div>

    <div class="row">
        <div class="col-auto d-none d-lg-block"> <span style="font-size:30px;color:transparent">---------</span></div>

        <div class="col-10" style="margin-top: 17px;">
            <button @onclick=@(()=> CloseTabs("Dictionary")) class="btn"><i class="fas fa-book"></i> Dictionary</button>
            <button @onclick=@(()=> CloseTabs("Images")) class="btn"><i class="far fa-image"></i> Images</button>
            <button @onclick=@(()=> CloseTabs("Videos")) class="btn"><i class="fab fa-youtube"></i> Videos</button>
            @*<button @onclick=@(()=> CloseTabs("Quotes")) class="btn">Quotes</button>
                <button @onclick=@(()=> CloseTabs("Idioms")) class="btn">Idioms</button>
                <button @onclick=@(()=> CloseTabs("Phrases")) class="btn">Phrases</button>*@
        </div>
    </div>



    @*<div style="margin-left:193px; margin-top:50px;">*@
    <div class="row">
        <div class="d-none d-lg-block" style="margin-left:170px;">
            
        </div>


        <div class="col ml-2 mt-5">

            @if (bol_Dictionary)
            {
                <Com_DictionaryApiDev Voc="VocVM.Voc" @ref="com_Dic" />
            }
            else if (bol_Images)
            {
                if (SearchResultVM.Images == null)
                {
                    <span>Loading...</span>
                }
                else
                {
                    <Com_Images SearchResultVM="SearchResultVM" />
                }
            }
            else if (bol_Videos)
            {
                if (SearchResultVM.Vids == null)
                {
                    <span>Loading...</span>
                }
                else if (SearchResultVM.Vids.Count == 0)
                {
                    <span>There's no videos for this vocabulary.</span>
                }
                else
                {
                    <Com_Videos SearchResultVM="SearchResultVM" @ref="com_Videos" />
                }
            }
            else if (bol_Quotes)
            {
                <Com_Quotes Voc="VocVM.Voc" />
            }
            else if (bol_Idioms)
            {
                <Com_Idioms Voc="VocVM.Voc" />
            }
            else if (bol_Phrases)
            {
                <Phrases Voc="VocVM.Voc" />
            }
        </div>

    </div>
</div>

    @code {

        [Parameter] public string txt { get; set; }
        [Inject] public IVocMasterService VocMasterService { get; set; }
        [Inject] public ISearchResultService SearchResultService { get; set; }
        [Inject] public IVocService VocService { get; set; }


        [Inject] public IJSRuntime JSRuntime { get; set; }


        public VocVM VocVM { get; set; } = new VocVM();
        public SearchResultVM SearchResultVM { get; set; } = new SearchResultVM();

        public bool bol_Dictionary { get; set; } = true;
        public bool bol_Images { get; set; }
        public bool bol_Videos { get; set; }
        public bool bol_Quotes { get; set; }
        public bool bol_Idioms { get; set; }
        public bool bol_Phrases { get; set; }

        protected Com_DictionaryApiDev com_Dic;
        protected Com_Videos com_Videos;


        protected override async Task OnInitializedAsync()
        {
            VocVM.Voc.Text = txt;
            VocVM.Exception = null;

            //SearchResultVM.Voc = VocVM.Voc;
            //SearchResultVM.Vids = await SearchResultService.GetVids(VocVM);

            //VocVM.Voc.Images = await VocMasterService.GetImagesByText(VocVM);
            //VocVM.Voc.VocSubtitles = await VocMasterService.GetVocSubtitlesByText(VocVM);

            //VocVM = await VocMasterService.GetVocVMByText(VocVM);
            //if (!string.IsNullOrEmpty(VocVM.Exception))
            //{
            //    await JSRuntime.Notfication(VocVM.Exception, IJSRuntimeExtensionMethods.SweetAlertMessageType.error, 10000);
            //    return;
            //}
            //await OptimizeVoc();

            await Search();
        }

        #region Pro
        void CloseTabs(string tap)
        {
            bol_Dictionary = (tap == "Dictionary") ? true : false;
            bol_Images = (tap == "Images") ? true : false;
            bol_Videos = (tap == "Videos") ? true : false;
            bol_Quotes = (tap == "Quotes") ? true : false;
            bol_Idioms = (tap == "Idioms") ? true : false;
            bol_Phrases = (tap == "Phrases") ? true : false;
        }

        async Task OptimizeVoc()
        {
            foreach (VocSubtitle vocSubtitle in VocVM.Voc.VocSubtitles ?? Enumerable.Empty<VocSubtitle>())
            {
                if (vocSubtitle.Subtitle.Movie.Subtitles == null) vocSubtitle.Subtitle.Movie.Subtitles = await Utility.ProduceSubtitlesFromText(vocSubtitle.Subtitle.Movie.MovieId);
            }
            foreach (var vocPhrase in VocVM.Voc.VocsPhrases ?? Enumerable.Empty<VocsPhrases>())
            {
                vocPhrase.Phrase.Text = vocPhrase.Phrase.Text.Replace(VocVM.Voc.Text, $"<mark style=\"background-color: #FCF3CF;\">{VocVM.Voc.Text}</mark>");
                vocPhrase.Phrase.Text = vocPhrase.Phrase.Text.Replace(VocVM.Voc.Text.Substring(0, 1).ToUpper() + VocVM.Voc.Text.Substring(1),
                    $"<mark style=\"background-color: #FCF3CF;\">{VocVM.Voc.Text.Substring(0, 1).ToUpper() + VocVM.Voc.Text.Substring(1)}</mark>");
            }

            if (VocVM.Voc.VocsQuotes != null) VocVM.Voc.VocsQuotes = VocVM.Voc.VocsQuotes.OrderBy(x => x.Quote.Text.Length).ToList();
            foreach (var vocQuote in VocVM.Voc.VocsQuotes ?? Enumerable.Empty<VocsQuotes>())
            {
                vocQuote.Quote.Text = vocQuote.Quote.Text.Replace(VocVM.Voc.Text, $"<mark style=\"background-color: #FCF3CF;\">{VocVM.Voc.Text}</mark>");
                vocQuote.Quote.Text = vocQuote.Quote.Text.Replace(VocVM.Voc.Text.Substring(0, 1).ToUpper() + VocVM.Voc.Text.Substring(1),
                $"<mark style=\"background-color: #FCF3CF;\">{VocVM.Voc.Text.Substring(0, 1).ToUpper() + VocVM.Voc.Text.Substring(1)}</mark>");
            }

            if (VocVM.Voc.VocsIdioms != null) VocVM.Voc.VocsIdioms = VocVM.Voc.VocsIdioms.OrderBy(x => x.Idiom.Text.Length).ToList();
            foreach (var vocIdiom in VocVM.Voc.VocsIdioms ?? Enumerable.Empty<VocsIdioms>())
            {
                vocIdiom.Idiom.Text = vocIdiom.Idiom.Text.Replace(VocVM.Voc.Text, $"<mark style=\"background-color: #FCF3CF;\">{VocVM.Voc.Text}</mark>");
                vocIdiom.Idiom.Text = vocIdiom.Idiom.Text.Replace(VocVM.Voc.Text.Substring(0, 1).ToUpper() + VocVM.Voc.Text.Substring(1),
                $"<mark style=\"background-color: #FCF3CF;\">{VocVM.Voc.Text.Substring(0, 1).ToUpper() + VocVM.Voc.Text.Substring(1)}</mark>");
            }
        }
        #endregion

        async Task Search()
        {
            if (string.IsNullOrEmpty(VocVM.Voc.Text.Trim()))
            {

            }
            else
            {
                //VocVM.Exception = null;
                //VocVM = await VocMasterService.GetVocVMByText(new VocVM { Voc = new Voc { Text = VocVM.Voc.Text } });
                txt = VocVM.Voc.Text.Trim();
                SearchResultVM = new SearchResultVM();
                var vocvm = await VocService.GetVocVMByText(VocVM.Voc.Text.Trim());
                SearchResultVM.Voc = vocvm.Voc;
                SearchResultVM.Vids = await SearchResultService.GetVids(new VocVM { Voc = new Voc { Text = VocVM.Voc.Text.Trim() } });
                SearchResultVM.Images = await SearchResultService.GetImages(new VocVM { Voc = new Voc { Text = VocVM.Voc.Text.Trim() } });


                if (!string.IsNullOrEmpty(VocVM.Exception))
                {
                    await JSRuntime.Notfication(VocVM.Exception, IJSRuntimeExtensionMethods.SweetAlertMessageType.error, 10000);
                    return;
                }
                await com_Dic.RefreshMe(VocVM.Voc.Text);
                if (com_Videos != null) await com_Videos.RefreshMe(SearchResultVM);
                await OptimizeVoc();
            }
        }

        //public async Task PlaySound()
        //{
        //    await JSRuntime.InvokeVoidAsync("playSound");
        //}
    }
    <style>
        .form-control-borderless {
            border: none;
        }

            .form-control-borderless:hover, .form-control-borderless:active, .form-control-borderless:focus {
                border: none;
                outline: none;
                box-shadow: none;
            }
    </style>
