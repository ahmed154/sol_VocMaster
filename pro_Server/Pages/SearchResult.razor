@page "/search/{txt}"

    <div class="container-fluid">
        <div class="row">

            <a href="" class="col-auto" style="margin-top: 15px; text-decoration: none;">
                <span style="font-size:30px;color:#2C3E50">VocWiki</span>
            </a>

            <div class="col-12 col-md-10 col-lg-8">
                <div class="col-8" style="margin-top: 17px;">
                    <EditForm Model="@VocVM" OnValidSubmit=@Search class="card card-sm">
                        <div class="row align-items-center" style="height: 45px;">
                            <div class="col">
                                <InputText @bind-Value="@VocVM.Voc.Text" class="form-control form-control-borderless" type="search" placeholder="Search In More Than 50,000 Vocabulary" />
                            </div>

                            <div class="col-auto form-control-borderless " style="margin-right:15px; border:none;">
                                <button class="btn" type="submit"><i class="fas fa-search h4 text-body" style="margin-top:4px"></i></button>
                            </div>

                        </div>
                    </EditForm>
                </div>
            </div>

            <div class="col" style="border: thin; text-align: right; margin-top: 15px;">
                <LoginDisplay />
            </div>
        </div>
    </div>

    <div class="container-fluid">
        <div class="row">
            <div class="col-auto"> <span style="font-size:30px;color:transparent">---------</span></div>

            <div class="col-8" style="margin-top: 17px;">
                <button class="btn">Dictionary</button>
                <button class="btn">Images</button>
                <button class="btn">Videos</button>
                <button class="btn">Quotes</button>
                <button class="btn">Idioms</button>
                <button class="btn">Expretions</button>
            </div>
            </div>
        </div>


    @code {

        [Parameter] public string txt { get; set; }
        [Inject] public IVocMasterService VocMasterService { get; set; }


        public VocVM VocVM { get; set; } = new VocVM();

        protected override async Task OnInitializedAsync()
        {
            VocVM.Voc.Text = txt;
            VocVM = await VocMasterService.GetVocVMByText(VocVM);
        }

        async Task Search()
        {
            if (string.IsNullOrEmpty(VocVM.Voc.Text.Trim()))
            {

            }
            else
            {
                VocVM = await VocMasterService.GetVocVMByText(VocVM);
            }
        }
    }
    <style>
        .form-control-borderless {
            border: none;
        }

            .form-control-borderless:hover, .form-control-borderless:active, .form-control-borderless:focus {
                border: none;
                outline: none;
                box-shadow: none;
            }
    </style>