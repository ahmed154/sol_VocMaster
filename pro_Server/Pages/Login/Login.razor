@page "/login"
@using pro_Server.Helpers
@using pro_Server.Services
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IUserService userService
@inject IJSRuntime jsRunTime


<EditForm Model="@User" OnValidSubmit="@ValidateUser">
    <div class="signup-form">
        <div class="box">
            <h2>Login</h2>
            <br /><br />
            <p style="font-size:12px; color:indianred">@LoginMesssage</p>
            <br />

            <div class="form-group">
                <div class="input-group">
                    <span class="input-group-addon"><i class="fa fa-paper-plane"></i></span>
                    <input @bind="User.EmailAddress" type="email" class="form-control" name="email" placeholder="Email Address" required="required">
                </div>
            </div>

            <div class="form-group">
                <div class="input-group">
                    <span class="input-group-addon"><i class="fa fa-lock"></i></span>
                    <input @bind="User.Password" type="password" class="form-control" name="password" placeholder="Password" required="required">
                </div>
            </div>

            <div class="form-group">
                <button type="submit" class="btn btn-primary btn-block btn-lg">Login</button>
            </div>
        </div>
        <div class="text-center">Don't have an account? <a href="signup"> Create Account</a></div>
    </div>
</EditForm>
<link href="css/LoginForm.css" rel="stylesheet" />


@code { private User User;
    public string LoginMesssage { get; set; }

    protected async override Task OnInitializedAsync()
    {
        User = new User();
    }

    private async Task<bool> ValidateUser()
    {
        //assume that user is valid
        //call an API

        var returnedUser = await userService.LoginAsync(User);

        if (string.IsNullOrEmpty(returnedUser.Token))
        {
            LoginMesssage = "Invalid username or password";
        }
        else
        {
            //await localStorageService.SetItemAsync("emailAddress", returnedUser.EmailAddress);
            //await localStorageService.SetItemAsync("token", returnedUser.Token);
            //await localStorageService.SetItemAsync("expiration", returnedUser.Expiration);

            await ((pro_Server.Auth.JWTAuthenticationStateProvider)AuthenticationStateProvider).Login(returnedUser);
            NavigationManager.NavigateTo("/index");
        }

        return await Task.FromResult(true);
    } }
