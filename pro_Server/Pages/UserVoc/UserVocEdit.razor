@page "/uservoc/edit/{id:int}"

<div class="container bg-white rounded border p-3">
    <div class="pl-3">
        <div class="row">
            <span style="font-size:18px; color:#8f8f8f;"><a href="/uservoc" style="color:#6372C4">UserVocs</a>  /  @id</span>
        </div>
        <div class="row pt-4">
            <button class="btn btn-primary" type="submit" @onclick=@(()=> Save()) style="background-color:#6372C4"><i class="far fa-save"></i> Save</button>
            <a class="btn border ml-1" href="/uservoc/@id"><i class="fas fa-undo"></i> Cancel</a>
        </div>
    </div>
</div>

<div class="container bg-white border box-shadow p-3 rounded">
    <UserVocForm UserVocVM="UserVocVM" ecb_Save="Update" Type="Edit" @ref="Form"/>
</div>

    @code {

        [Inject] public IUserVocService UserVocService { get; set; }
        [Inject] public IJSRuntime JSRuntime { get; set; }
        [Inject] NavigationManager NavigationManager { get; set; }
        [Parameter] public int id { get; set; }

        UserVocVM UserVocVM { get; set; } = new UserVocVM();
        protected UserVocForm Form;

        protected override async Task OnInitializedAsync()
        {
            UserVocVM = await UserVocService.GetUserVoc(id);
        }

        private async Task Save()
        {
            await Form.ParentSubmit();
        }

        private async Task Update()
        {
            UserVocVM.Exception = null;
            //UserVocVM updatedUserVocVM = await UserVocService.UpdateUserVoc(UserVocVM.UserVoc.Id, UserVocVM);

            //if (string.IsNullOrEmpty(updatedUserVocVM.Exception))
            //{
            //    await JSRuntime.Notfication($"UserVocment {UserVocVM.UserVoc.Voc.Text} has been updated successfully!", IJSRuntimeExtensionMethods.SweetAlertMessageType.success, 3000);
            //    //NavigationManager.NavigateTo($"/uservoc/{updatedUserVocVM.UserVoc.Id}");
            //}
            //else
            //{
            //    await JSRuntime.Notfication(updatedUserVocVM.Exception, IJSRuntimeExtensionMethods.SweetAlertMessageType.error, 10000);
            //}
        }
    }
